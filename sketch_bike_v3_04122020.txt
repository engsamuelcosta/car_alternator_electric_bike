  /*
 * Created by: Samuel Alencar da Costa
 * samuel.alencar85@gmail.com
 * 
 * Wiring for I2C connection:
 * SDA -> Analog Pin A4  
 * SCL -> Analog Pin A5 
 * 
 * This code configures an odometer and various sensors (accelerator, brake, buttons, etc.) 
 * for a vehicle, using an LCD display and an I2C interface. It also supports configuration 
 * for wheel radius and displays voltage readings.
 */

#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include <EEPROM.h>
#include <SPI.h>  // Library for various applications

// Pin connections for Reed Switch, buttons, and sensor inputs
#define MEMORIA 120  // Memory position for system configuration flag
#define PosRaio 125  // Position for storing wheel radius value

#define pinBotoes A0    // Button shield on analog pin A0
#define pinAceler A1    // Accelerator signal connected to analog pin A1
#define pinBotoes2 A2   // Buttons for increment, decrement, and select on analog pin A2

// Serial communication pins for BT module (Bluetooth)
#define pinRX 0
#define pinTX 1

// Brake lever connected to digital pin D2
#define pinBrake 2

// Relay pins for various components (regulator, stator, rotor)
#define relayReg 3  // Relay for regulator bypass mode
#define relayEst 4  // Relay for stator output
#define relayRot 5  // Relay for rotor state

// Button inputs for user control
#define ReedSwitch 6
#define BotaoEnterOk 7
#define BotaoDecremento 8
#define BotaoIncremento 9

// Button shield states
#define btNENHUM 0
#define btSELECT 1
#define btLEFT 2
#define btUP 3
#define btDOWN 4
#define btRIGHT 5

char val;  // Variable for sensor reading

// Timing constants
#define tempoDebounce 50  // Debounce time for button inputs

// Odometer and speedometer setup with Hall effect sensor
float bicycleWheelCircumference = 2.1206;  // Wheel circumference in meters
unsigned long revolutionCount = 0;        // Counter for wheel revolutions
float Distancia = 0;                      // Total distance in kilometers

// EEPROM storage for wheel radius and system configuration flag
bool sensor = 0, estado_anterior = 0, Incremento = 0, Decremento = 0;
byte cont = 0;  // Counter for lap tracking

// LCD display initialization with I2C
LiquidCrystal_I2C lcd(0x27, 16, 2);  // LCD I2C address and size configuration

void setup() {
  // Initialize I2C communication and LCD
  lcd.init();
  lcd.backlight();
  Serial.begin(9600);  // Start serial communication at 9600 baud rate
  Wire.begin();        // Initialize I2C communication

  // Set pin modes
  pinMode(pinBrake, INPUT_PULLUP);  // Configure brake lever input
  pinMode(relayEst, OUTPUT);        // Relay for stator
  pinMode(relayRot, OUTPUT);        // Relay for rotor
  pinMode(relayReg, OUTPUT);        // Relay for regulator

  // Display initial message
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("APERTE O BOTAO");
  lcd.setCursor(4, 1);
  lcd.print("PARA INICIAR");
  delay(4000);

  // Load wheel radius from EEPROM
  raio = EEPROM.read(PosRaio);
  lcd.setCursor(3, 0);
  lcd.print("Dist:");
  lcd.setCursor(6, 1);
  lcd.print(Distancia);
  lcd.setCursor(14, 1);
  lcd.print("Km");
  delay(500);

  // If the system configuration flag is not set, configure the wheel radius
  if (EEPROM.read(MEMORIA) != 66) {
    ConfiguraRaio();  // Configure wheel radius
    EEPROM.write(MEMORIA, 66);  // Set the configuration flag
  }
}

void loop() {
  // Read sensors and button states
  sensor = digitalRead(ReedSwitch);
  Decremento = digitalRead(BotaoDecremento);
  Incremento = digitalRead(BotaoIncremento);

  // Calculate distance based on wheel revolutions
  if (sensor == 0 && estado_anterior == 1) {
    VoltaCompleta++;
    Distancia = (float)(2 * 3.14 * 66 * VoltaCompleta) / 100000.0;  // Calculate distance (fixed radius)
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print(" ");
    lcd.setCursor(6, 1);
    lcd.print(Distancia);
    lcd.setCursor(14, 1);
    lcd.print("km");
    delay(500);
    estado_anterior = 0;
  }

  if (sensor == 1 && estado_anterior == 0) {
    estado_anterior = 1;
  }

  // Handle button increments and decrements for wheel radius
  if (Incremento == 1 && EstadoAnteriorIncremento == 0) {
    EstadoAnteriorIncremento = 1;
  }
  if (Incremento == 0 && EstadoAnteriorIncremento == 1) {
    EstadoAnteriorIncremento = 0;
    lcd.clear();
    ConfiguraRaio();
  }

  // Voltage meter (reading from A2 pin)
  float tensao = analogRead(A2);
  tensao = tensao * 50 / 1023;
  Serial.println("Tensao");
  Serial.println(tensao);
  Serial.println("V");
  Serial.println("Distancia");
  Serial.println(Distancia);
  delay(500);

  // Display voltage and distance
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Carga:");
  lcd.setCursor(7, 0);
  lcd.print(tensao);
  lcd.setCursor(11, 0);
  lcd.print("v");
  lcd.setCursor(0, 1);
  lcd.print("Dist:");
  lcd.setCursor(6, 1);
  lcd.print(Distancia);
  lcd.setCursor(10, 1);
  lcd.print("Km");
  delay(1000);

  // Handle button states and relay control
  int valBotoes2 = analogRead(pinBotoes2);
  int valBotoes = analogRead(pinBotoes);
  int valAceler = analogRead(pinAceler);
  int valBrake = digitalRead(pinBrake);

  if ((valBrake == LOW) && (valAceler >= 205)) {
    delay(200);   
    digitalWrite(relayEst, LOW);
    digitalWrite(relayRot, LOW);
    digitalWrite(relayReg, LOW);
    digitalWrite(13, LOW);
    Serial.println("LIBERAR O FREIO");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("LIBERAR O FREIO");
  } else if ((valBrake == HIGH) && (valAceler >= 205)) {
    delay(200);
    digitalWrite(relayRot, LOW);
    delay(200);
    digitalWrite(relayReg, LOW);
    delay(500);
    digitalWrite(relayEst, LOW);
    digitalWrite(13, LOW);
    Serial.println("MODO MOTOR ATIVO");
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print("MODO MOTOR ATIVO");
  } else if ((valBrake == HIGH) && (valAceler < 60)) {
    delay(500);   
    digitalWrite(relayEst, HIGH);
    digitalWrite(relayRot, HIGH);
    digitalWrite(relayReg, HIGH);
    digitalWrite(13, LOW);
    Serial.println("MODO GERADOR");
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print("MODO GERADOR");
  } else if ((valBrake == LOW) && (valAceler < 60)) {
    delay(200);   
    digitalWrite(relayEst, HIGH);
    digitalWrite(relayRot, HIGH);
    digitalWrite(relayReg, HIGH);
    digitalWrite(13, HIGH);
    Serial.println("FREIO REGENERATIVO");
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print("FREIO REGENERATIVO");
  }

  // Handle button input using analog readings
  if ((valBotoes < 800) && (valBotoes >= 600)) {
    estadoBotao(btSELECT);
  } else if ((valBotoes < 600) && (valBotoes >= 400)) {
    estadoBotao(btLEFT);
  } else if ((valBotoes < 400) && (valBotoes >= 200)) {
    estadoBotao(btUP);
  } else if ((valBotoes < 200) && (valBotoes >= 60)) {
    estadoBotao(btDOWN);
  } else if (valBotoes < 60) {
    estadoBotao(btRIGHT);
  } else {
    estadoBotao(btNENHUM);
    digitalWrite(relayEst, LOW);
    digitalWrite(relayRot, LOW);
    digitalWrite(relayReg, LOW);
  }
}
